
//Note: pick shader is not deferred
#version 330 core


layout(location = 0) out vec4 _fragColorOut;

in vec2 _tcoordOut;

uniform sampler2D _ufTextureId_i0; // Position  
uniform sampler2D _ufTextureId_i1; // Color

uniform vec3 _ufViewPos;

uniform int _ufHorizontal;

uniform float _fFocalDepth;
uniform float _fFocalRange;

void main() {
    float _ufGaussianWeight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);
    vec4 baseColor = texture(_ufTextureId_i1, _tcoordOut);
    float bca = baseColor.a;
    vec2 tex_offset = 1.0 / textureSize(_ufTextureId_i1, 0); 
    vec4 result = baseColor * _ufGaussianWeight[0];
    
    if(_ufHorizontal>0) {
        for(int i = 1; i < 5; ++i) {
            result += texture(_ufTextureId_i1, _tcoordOut + vec2(tex_offset.x * i, 0.0)) * _ufGaussianWeight[i];
            result += texture(_ufTextureId_i1, _tcoordOut - vec2(tex_offset.x * i, 0.0)) * _ufGaussianWeight[i];
        }
    }
    else {
        for(int i = 1; i < 5; ++i) {
            result += texture(_ufTextureId_i1, _tcoordOut + vec2(0.0, tex_offset.y * i)) * _ufGaussianWeight[i];
            result += texture(_ufTextureId_i1, _tcoordOut - vec2(0.0, tex_offset.y * i)) * _ufGaussianWeight[i];
        } 
    }

    //Amount of blur = the depth function
    vec3 pos = texture(_ufTextureId_i0, _tcoordOut).xyz;
    float fragToViewDistance = distance(pos, _ufViewPos);
    
    //e^(-1/x)^3
    float oneoverx = -1 / (fragToViewDistance / _fFocalRange);
    //Derek 2/9/18 - Here we limit this to 0.5 why?  because any more than that is just too much blur.  it looks sloppy
    float fDepth = clamp(pow(2.71828f, oneoverx), 0.2, 0.7);//limit 
    
	_fragColorOut = mix(baseColor,result, fDepth);
    _fragColorOut.a = bca;  //Save this ** important for rendering thumbs
}
