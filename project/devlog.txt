## TODO list
TODO - Instead of hard code vertex interleaved formats, allow us to supply multiple buffers for the vertex components (n,v,t..)
TODO - Move all STL header files DOWN into the respective CPP files that need them. This will speed-up compilation time a lot.



## Currently Working On..
1. Essentially our MeshNode/MeshSpec, should really be one class.  to create new meshes, we'd do a shallow copy of the class.
2. The same goes for all the Spec/Data model classes.
3. Additionally, we need to remove class inheritance, and favor composition like Unity does.
4. WorldObject will be composited by other items and not inherited.
5. Adding "SCENE" to the world.  

## Design Changes
Gu owns the window manager.  Window manager owns windows.  Windows point to scenes.
	Window ->
		Scene->
			<GameObject>
			PhysicsWorld
				PhysicsNode : GameObject

Scene owns the camera (currently, window owns camera).  Camera is a property on the RenderTarget.

RenderPipe is part of a rendertarget.  A rendertarget can be a window, or buffer.
GraphicsWindow :: RenderTarget
RenderTarget
	RenderPipe 


Every window (the system window blender runs in) has a screen property. Every screen in turn has a scene property which defines the active editable scene.

General Notes
Multiple Rendering in a single area is going to be important.

2/7/2020
Scene

GLContext
	Shaders, texture, models, renderpipe, particle manager, PhysicsWorld (as its gpu accellerated), picker (uses buffers)

2/6/2020
Use Screen to represent a UI window.
Move Gui2d to Gu
Undo changes.  Gui2d is actually Screen.
Rename Gui2d to screen
add Screen(s) to a new Gui2d class.

TabButton - the basic of the UI
TODO Make the ui text not shrink vertically based on window size.  
TODO make the window not squash horizontally (keep the horizontal ratio)

We need to make the render system "windows" more modular.  Like, we need to create multiple windows if needed.

*WindowManager
* Get rid of "OpenGL Api" we don't need that.. right.

Moved Window control to applciation (not in the main core)
Removed Mob to Bin converter (apprunner.cpp)
Removed Cycle Logging in Logger.cpp


12/29/19
Began simple port to Make and CMake with gcc.  Fix this in the future.  The one caveat here is still debugging with VS. 
VS allows a CMake project, but it doesn't appear as lightweight as a simple makefile.

**Previously we removed the custom app class instantiation in preparation for 
	1 - a scripting engine 
	2 - Multiple graphics windows 
	3 - Split window view (blender)

We converted Shake thus to its own EXE.  It's no longer a library.

8/23/19
Remove most of AppBase and move to ProjectFile.
Move remaining AppBase contents into ProjectFile
Remove "AppBase" or make it ProjectBase. Sth.
Generic Windowing for UI popups.
move RenderPipe to Window
Rendering multiple windows
need multiple contexts
shaders & Everything need to be changed...

8/14/19
In FlyCam make the FlyCam a Script Run on top of CameraNode
	Remove FlyCam Class.

8/11/19
Adding a Window layer,
replacing Viewport with WindowViewport to differentiate between window and render viewport 
this is in preparation for multiple viewports for the UI system.

having a problem with teh file SDL.h because it conflicts.
added <SDL> from a more absolute path.

Todo: merge engine and apprunner

Need:
	For split view need
	Image Dropdown like blender
	remove "udim"

